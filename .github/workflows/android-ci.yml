name: Build Flutter Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ☕ Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Configure Java Home for Gradle
        run: |
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "Java Home: $JAVA_HOME"
          echo "Java Version: $(java -version 2>&1 | head -n 1)"
          
      - name: 🐦 Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 📦 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
          
      - name: 📋 Flutter doctor
        run: flutter doctor -v
        
      - name: 📦 Get dependencies
        run: |
          flutter pub get
          flutter pub deps

      - name: 🔧 Clean build
        run: flutter clean

      - name: 🔧 Fix plugin namespace, manifest, and JVM compatibility issues
        run: |
          # Fix on_audio_query_android plugin
          PLUGIN_DIR="$HOME/.pub-cache/hosted/pub.dev/on_audio_query_android-1.1.0/android"
          if [ -d "$PLUGIN_DIR" ]; then
            echo "Fixing on_audio_query_android plugin..."

            # Add namespace to build.gradle if missing
            if ! grep -q "namespace" "$PLUGIN_DIR/build.gradle"; then
              sed -i '/android {/a\    namespace "com.lucasjosino.on_audio_query_android"' "$PLUGIN_DIR/build.gradle"
              echo "✅ Namespace added to build.gradle"
            fi

            # Fix JVM target compatibility
            if ! grep -q "jvmTarget.*17" "$PLUGIN_DIR/build.gradle"; then
              # Add or update compileOptions
              if ! grep -q "compileOptions" "$PLUGIN_DIR/build.gradle"; then
                sed -i '/namespace/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' "$PLUGIN_DIR/build.gradle"
              fi

              # Add or update kotlinOptions
              if ! grep -q "kotlinOptions" "$PLUGIN_DIR/build.gradle"; then
                sed -i '/compileOptions/,/}/a\    kotlinOptions {\n        jvmTarget = "17"\n    }' "$PLUGIN_DIR/build.gradle"
              else
                sed -i 's/jvmTarget = "[^"]*"/jvmTarget = "17"/' "$PLUGIN_DIR/build.gradle"
              fi
              echo "✅ JVM target compatibility fixed (Java 17 + Kotlin 17)"
            fi

            # Remove package attribute from AndroidManifest.xml
            MANIFEST_FILE="$PLUGIN_DIR/src/main/AndroidManifest.xml"
            if [ -f "$MANIFEST_FILE" ]; then
              if grep -q 'package=' "$MANIFEST_FILE"; then
                sed -i 's/package="[^"]*"//g' "$MANIFEST_FILE"
                sed -i 's/<manifest[^>]*>/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android">/' "$MANIFEST_FILE"
                echo "✅ Package attribute removed from AndroidManifest.xml"
              fi
            fi

            echo "✅ on_audio_query_android plugin fully fixed"
          fi

          # Fix other potential plugins with similar issues
          find "$HOME/.pub-cache/hosted/pub.dev" -name "build.gradle" -path "*/android/build.gradle" | while read gradle_file; do
            plugin_dir=$(dirname "$gradle_file")
            plugin_name=$(basename "$(dirname "$plugin_dir")")

            if [[ "$plugin_name" == *"audio"* ]] || [[ "$plugin_name" == *"permission"* ]]; then
              echo "Fixing plugin: $plugin_name"

              # Add namespace if missing
              if ! grep -q "namespace" "$gradle_file"; then
                namespace="com.example.${plugin_name}"
                sed -i "/android {/a\\    namespace \"$namespace\"" "$gradle_file"
                echo "✅ Fixed namespace for $plugin_name"
              fi

              # Fix JVM target compatibility and kotlinOptions issues
              if ! grep -q "jvmTarget.*17" "$gradle_file"; then
                # Add compileOptions if missing
                if ! grep -q "compileOptions" "$gradle_file"; then
                  sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' "$gradle_file"
                fi

                # Fix kotlinOptions placement - should be in android block, not compileOptions
                if grep -q "compileOptions.*kotlinOptions" "$gradle_file"; then
                  # Remove kotlinOptions from compileOptions
                  sed -i '/compileOptions/,/}/ { /kotlinOptions/,/}/d; }' "$gradle_file"
                fi

                # Add kotlinOptions correctly in android block
                if ! grep -q "kotlinOptions" "$gradle_file"; then
                  sed -i '/compileOptions/,/}/a\    kotlinOptions {\n        jvmTarget = "17"\n    }' "$gradle_file"
                else
                  sed -i 's/jvmTarget = "[^"]*"/jvmTarget = "17"/' "$gradle_file"
                fi
                echo "✅ Fixed JVM target for $plugin_name"
              fi

              # Fix manifest
              manifest_file="$plugin_dir/src/main/AndroidManifest.xml"
              if [ -f "$manifest_file" ] && grep -q 'package=' "$manifest_file"; then
                sed -i 's/package="[^"]*"//g' "$manifest_file"
                echo "✅ Fixed manifest for $plugin_name"
              fi
            fi
          done

          # Special fix for audio_service plugin kotlinOptions issue
          AUDIO_SERVICE_GRADLE="$HOME/.pub-cache/hosted/pub.dev/audio_service-0.18.18/android/build.gradle"
          if [ -f "$AUDIO_SERVICE_GRADLE" ]; then
            echo "Applying special fix for audio_service plugin..."

            # Remove kotlinOptions from compileOptions block
            sed -i '/compileOptions/,/}/ {
              /kotlinOptions/,/}/d
            }' "$AUDIO_SERVICE_GRADLE"

            # Add kotlinOptions correctly in android block
            if ! grep -q "kotlinOptions" "$AUDIO_SERVICE_GRADLE"; then
              sed -i '/compileOptions/,/}/a\    kotlinOptions {\n        jvmTarget = "1.8"\n    }' "$AUDIO_SERVICE_GRADLE"
            fi

            echo "✅ Fixed audio_service kotlinOptions placement"
          fi

      - name: 🔍 Analyze code
        run: flutter analyze

      - name: 🧪 Run tests
        run: flutter test
        
      - name: 🔐 Decode keystore (Release only)
        if: env.KEYSTORE_BASE64 != '' && (github.event.inputs.build_type != 'debug')
        run: |
          echo "Decoding keystore..."
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/upload-keystore.jks
          echo "Keystore decoded. File size: $(wc -c < android/app/upload-keystore.jks) bytes"

      - name: 🔑 Create key.properties (Release only)
        if: env.KEYSTORE_BASE64 != '' && (github.event.inputs.build_type != 'debug')
        run: |
          cat <<EOF > android/key.properties
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=app/upload-keystore.jks
          EOF

      - name: 🔍 Debug keystore setup
        if: env.KEYSTORE_BASE64 != '' && (github.event.inputs.build_type != 'debug')
        run: |
          echo "Checking keystore and key.properties setup..."
          ls -la android/
          ls -la android/app/
          echo "Contents of key.properties:"
          cat android/key.properties
          echo "Keystore file exists:"
          test -f android/app/upload-keystore.jks && echo "✅ Keystore found" || echo "❌ Keystore missing"

      - name: 🏗️ Build Release APK
        if: github.event.inputs.build_type != 'debug'
        run: flutter build apk --release --verbose

      - name: 🏗️ Build Debug APK
        if: github.event.inputs.build_type == 'debug'
        run: flutter build apk --debug --verbose

      - name: 📱 Upload Release APK
        if: github.event.inputs.build_type != 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: offmusic-release-apk-${{ github.run_number }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

      - name: 📱 Upload Debug APK
        if: github.event.inputs.build_type == 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: offmusic-debug-apk-${{ github.run_number }}
          path: build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 7
          
      - name: 📊 APK Info
        run: |
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "Release APK size: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)"
            echo "Release APK path: build/app/outputs/flutter-apk/app-release.apk"
          fi
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "Debug APK size: $(du -h build/app/outputs/flutter-apk/app-debug.apk | cut -f1)"
            echo "Debug APK path: build/app/outputs/flutter-apk/app-debug.apk"
          fi
